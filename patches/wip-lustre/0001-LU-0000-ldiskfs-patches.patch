From d793e3b139298c11fd421d7580cb38fe42e91521 Mon Sep 17 00:00:00 2001
From: Tim Day <tday141@gmail.com>
Date: Wed, 15 Feb 2023 04:36:36 +0000
Subject: [PATCH] LU-0000 ldiskfs: patches

5.10

Signed-off-by: Timothy Day <timday@amazon.com>
---
 .../patches/linux-5.10/ext4-misc.patch        |  4 +--
 .../patches/linux-5.10/ext4-pdirop.patch      | 25 +++++++++++--------
 .../linux-5.9/ext4-simple-blockalloc.patch    |  8 +++---
 .../ext4-xattr-disable-credits-check.patch    |  5 ++--
 4 files changed, 22 insertions(+), 20 deletions(-)

diff --git a/ldiskfs/kernel_patches/patches/linux-5.10/ext4-misc.patch b/ldiskfs/kernel_patches/patches/linux-5.10/ext4-misc.patch
index b694fd4d43..23a5fe736a 100644
--- a/ldiskfs/kernel_patches/patches/linux-5.10/ext4-misc.patch
+++ b/ldiskfs/kernel_patches/patches/linux-5.10/ext4-misc.patch
@@ -172,7 +172,7 @@ index ea5aefa..056009e 100644
  			sizeof(es->s_first_error_func));
  		es->s_first_error_line = cpu_to_le32(line);
  		es->s_first_error_ino = es->s_last_error_ino;
-@@ -6673,16 +6673,12 @@ static int __init ext4_init_fs(void)
+@@ -6743,16 +6743,12 @@
  	if (err)
  		goto out05;
  
@@ -186,9 +186,9 @@ index ea5aefa..056009e 100644
  out:
 -	unregister_as_ext2();
 -	unregister_as_ext3();
+ 	ext4_fc_destroy_dentry_cache();
  out05:
  	destroy_inodecache();
- out1:
 @@ -6706,8 +6702,6 @@ out7:
  static void __exit ext4_exit_fs(void)
  {
diff --git a/ldiskfs/kernel_patches/patches/linux-5.10/ext4-pdirop.patch b/ldiskfs/kernel_patches/patches/linux-5.10/ext4-pdirop.patch
index 2b23d52f13..319da90fcd 100644
--- a/ldiskfs/kernel_patches/patches/linux-5.10/ext4-pdirop.patch
+++ b/ldiskfs/kernel_patches/patches/linux-5.10/ext4-pdirop.patch
@@ -160,7 +160,7 @@ This patch contains:
  	int err;
  
  	if (unlikely(EXT4_SB(inode->i_sb)->s_max_dir_size_kb &&
-@@ -62,15 +63,22 @@ struct buffer_head *ext4_append(handle_t
+@@ -63,6 +64,10 @@
  		      EXT4_SB(inode->i_sb)->s_max_dir_size_kb)))
  		return ERR_PTR(-ENOSPC);
  
@@ -169,6 +169,10 @@ This patch contains:
 +	down(&ei->i_append_sem);
 +
  	*block = inode->i_size >> inode->i_sb->s_blocksize_bits;
+ 	map.m_lblk = *block;
+ 	map.m_len = 1;
+@@ -81,12 +86,15 @@
+ 	}
  
  	bh = ext4_bread(handle, inode, *block, EXT4_GET_BLOCKS_CREATE);
 -	if (IS_ERR(bh))
@@ -439,7 +443,7 @@ This patch contains:
  /*
   * Probe for a directory leaf block to search.
   *
-@@ -765,10 +996,11 @@ struct stats dx_show_entries(struct dx_h
+@@ -788,10 +1019,11 @@
   */
  static struct dx_frame *
  dx_probe(struct ext4_filename *fname, struct inode *dir,
@@ -447,7 +451,7 @@ This patch contains:
 +	 struct dx_hash_info *hinfo, struct dx_frame *frame_in,
 +	 struct htree_lock *lck)
  {
- 	unsigned count, indirect;
+ 	unsigned count, indirect, level, i;
 -	struct dx_entry *at, *entries, *p, *q, *m;
 +	struct dx_entry *at, *entries, *p, *q, *m, *dx = NULL;
  	struct dx_root_info *info;
@@ -470,12 +474,10 @@ This patch contains:
  			ext4_warning_inode(dir,
  					   "dx entry: count %u beyond limit %u",
  					   count, dx_get_limit(entries));
-@@ -870,8 +1109,70 @@ dx_probe(struct ext4_filename *fname, st
- 			       dx_get_block(at)));
+@@ -898,6 +1137,70 @@
  		frame->entries = entries;
  		frame->at = at;
--		if (!indirect--)
-+
+ 
 +		if (indirect == 0) { /* the last index level */
 +			struct ext4_dir_lock_data *ld;
 +			u64 myblock;
@@ -535,13 +537,14 @@ This patch contains:
 +				ext4_htree_de_unlock(lck);
 +				continue;
 +			}
- 			return frame;
++ 			return frame;
 +		}
 +		dx = at;
 +		indirect--;
- 		frame++;
- 		frame->bh = ext4_read_dirblock(dir, dx_get_block(at), INDEX);
- 		if (IS_ERR(frame->bh)) {
++
+ 		block = dx_get_block(at);
+ 		for (i = 0; i <= level; i++) {
+ 			if (blocks[i] == block) {
 @@ -940,7 +1241,7 @@ static void dx_release(struct dx_frame *
  static int ext4_htree_next_block(struct inode *dir, __u32 hash,
  				 struct dx_frame *frame,
diff --git a/ldiskfs/kernel_patches/patches/linux-5.9/ext4-simple-blockalloc.patch b/ldiskfs/kernel_patches/patches/linux-5.9/ext4-simple-blockalloc.patch
index 3b62efbe01..3ec863cc90 100644
--- a/ldiskfs/kernel_patches/patches/linux-5.9/ext4-simple-blockalloc.patch
+++ b/ldiskfs/kernel_patches/patches/linux-5.9/ext4-simple-blockalloc.patch
@@ -283,26 +283,26 @@
  #define EXT4_ATTR(_name,_mode,_id)					\
  static struct ext4_attr ext4_attr_##_name = {				\
  	.attr = {.name = __stringify(_name), .mode = _mode },		\
-@@ -208,6 +237,9 @@ EXT4_ATTR_FUNC(delayed_allocation_blocks
- EXT4_ATTR_FUNC(session_write_kbytes, 0444);
+@@ -210,6 +239,9 @@
  EXT4_ATTR_FUNC(lifetime_write_kbytes, 0444);
  EXT4_ATTR_FUNC(reserved_clusters, 0644);
+ EXT4_ATTR_FUNC(sra_exceeded_retry_limit, 0444);
 +EXT4_ATTR_FUNC(mb_c1_threshold, 0644);
 +EXT4_ATTR_FUNC(mb_c2_threshold, 0644);
 +EXT4_ATTR_FUNC(mb_c3_threshold, 0644);
  
  EXT4_ATTR_OFFSET(inode_readahead_blks, 0644, inode_readahead,
  		 ext4_sb_info, s_inode_readahead_blks);
-@@ -261,6 +293,9 @@ static struct attribute *ext4_attrs[] =
+@@ -263,6 +295,9 @@
  	ATTR_LIST(session_write_kbytes),
  	ATTR_LIST(lifetime_write_kbytes),
  	ATTR_LIST(reserved_clusters),
 +	ATTR_LIST(mb_c1_threshold),
 +	ATTR_LIST(mb_c2_threshold),
 +	ATTR_LIST(mb_c3_threshold),
+ 	ATTR_LIST(sra_exceeded_retry_limit),
  	ATTR_LIST(inode_readahead_blks),
  	ATTR_LIST(inode_goal),
- 	ATTR_LIST(max_dir_size),
 @@ -378,6 +413,15 @@ static ssize_t ext4_attr_show(struct kob
  		return snprintf(buf, PAGE_SIZE, "%llu\n",
  				(s64) EXT4_C2B(sbi,
diff --git a/ldiskfs/kernel_patches/patches/rhel8.3/ext4-xattr-disable-credits-check.patch b/ldiskfs/kernel_patches/patches/rhel8.3/ext4-xattr-disable-credits-check.patch
index e374def73d..a92c595e8c 100644
--- a/ldiskfs/kernel_patches/patches/rhel8.3/ext4-xattr-disable-credits-check.patch
+++ b/ldiskfs/kernel_patches/patches/rhel8.3/ext4-xattr-disable-credits-check.patch
@@ -2,7 +2,7 @@ Index: linux-4.18.0-240.1.1.el8/fs/ext4/xattr.c
 ===================================================================
 --- linux-4.18.0-240.1.1.el8.orig/fs/ext4/xattr.c
 +++ linux-4.18.0-240.1.1.el8/fs/ext4/xattr.c
-@@ -2318,10 +2318,6 @@ ext4_xattr_set_handle(handle_t *handle,
+@@ -2334,10 +2334,6 @@
  						   flags & XATTR_CREATE);
  		brelse(bh);
  
@@ -10,6 +10,5 @@ Index: linux-4.18.0-240.1.1.el8/fs/ext4/xattr.c
 -			error = -ENOSPC;
 -			goto cleanup;
 -		}
+ 		WARN_ON_ONCE(!(current->flags & PF_MEMALLOC_NOFS));
  	}
- 
- 	error = ext4_reserve_inode_write(handle, inode, &is.iloc);
-- 
2.27.0

